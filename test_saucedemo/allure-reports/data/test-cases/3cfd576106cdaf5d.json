{"uid":"3cfd576106cdaf5d","name":"test_login_successful[firefox]","fullName":"test_check_pytest#test_login_successful","historyId":"1f8b2bcfa8fd5844fe7b2053bb346c35","time":{"start":1712081519123,"stop":1712081519123,"duration":0},"description":"Проверка входа","descriptionHtml":"<p>Проверка входа</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: Process unexpectedly closed with status 0","statusTrace":"request = <SubRequest 'browser' for <Function test_login_successful[firefox]>>\n\n    @pytest.fixture(params=['firefox'])\n    def browser(request):\n        browser_name = request.param\n        driver_path = get_driver_path(browser_name)\n        if browser_name.lower() == 'chrome':\n            service = ChromeService(executable_path=driver_path)\n            options_c = ChromeOptions()\n            options_c.add_argument(\"-headless\")\n            options_c.add_argument(\"user-agent=Firefox\")\n            driver = webdriver.Chrome(service=service, options=options_c)\n        elif browser_name.lower() == 'chrome_mob':\n            service = ChromeService(executable_path=driver_path)\n            options_cm = ChromeOptions()\n            mobile_emulation = {\"deviceName\": \"iPhone 4\"}\n            options_cm.add_experimental_option(\"mobileEmulation\", mobile_emulation)\n            driver = webdriver.Chrome(service=service, options=options_cm)\n        elif browser_name.lower() == 'firefox':\n            service = FirefoxService(executable_path=driver_path)\n            options_f = FirefoxOptions()\n>           driver = webdriver.Firefox(service=service, options=options_f)\n\n..\\config\\config_param.py:67: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\firefox\\webdriver.py:69: in __init__\n    super().__init__(command_executor=executor, options=options)\n..\\..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:208: in __init__\n    self.start_session(capabilities)\n..\\..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:292: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n..\\..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000177E43CCCE0>, response = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"Process unexpectedly closed with status 0\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: Process unexpectedly closed with status 0\n\n..\\..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser","time":{"start":1712081519124,"stop":1712081524459,"duration":5335},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: Process unexpectedly closed with status 0\n\n","statusTrace":"  File \"C:\\Users\\Lena\\PycharmProjects\\pythonProjectgiiiiiiiiiiit\\.venv\\Lib\\site-packages\\pluggy\\_callers.py\", line 166, in _multicall\n    teardown.throw(outcome._exception)\n  File \"C:\\Users\\Lena\\PycharmProjects\\pythonProjectgiiiiiiiiiiit\\.venv\\Lib\\site-packages\\_pytest\\setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"C:\\Users\\Lena\\PycharmProjects\\pythonProjectgiiiiiiiiiiit\\.venv\\Lib\\site-packages\\pluggy\\_callers.py\", line 102, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Lena\\PycharmProjects\\pythonProjectgiiiiiiiiiiit\\.venv\\Lib\\site-packages\\_pytest\\fixtures.py\", line 1132, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Lena\\PycharmProjects\\pythonProjectgiiiiiiiiiiit\\.venv\\Lib\\site-packages\\_pytest\\fixtures.py\", line 906, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Lena\\PycharmProjects\\pythonProjectgiiiiiiiiiiit\\vzhuh\\config\\config_param.py\", line 67, in browser\n    driver = webdriver.Firefox(service=service, options=options_f)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Lena\\PycharmProjects\\pythonProjectgiiiiiiiiiiit\\.venv\\Lib\\site-packages\\selenium\\webdriver\\firefox\\webdriver.py\", line 69, in __init__\n    super().__init__(command_executor=executor, options=options)\n  File \"C:\\Users\\Lena\\PycharmProjects\\pythonProjectgiiiiiiiiiiit\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 208, in __init__\n    self.start_session(capabilities)\n  File \"C:\\Users\\Lena\\PycharmProjects\\pythonProjectgiiiiiiiiiiit\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 292, in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Lena\\PycharmProjects\\pythonProjectgiiiiiiiiiiit\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\Lena\\PycharmProjects\\pythonProjectgiiiiiiiiiiit\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":true},{"name":"selenium_action","time":{"start":1712081530278,"stop":1712081530278,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"login","time":{"start":1712081530278,"stop":1712081530278,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"logout","time":{"start":1712081530278,"stop":1712081530278,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"afterStages":[{"name":"logout::0","time":{"start":1712081532720,"stop":1712081532720,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"selenium_action::0","time":{"start":1712081532721,"stop":1712081532721,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"login::0","time":{"start":1712081532721,"stop":1712081532721,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentStep":false,"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"tag","value":"smoke_market"},{"name":"suite","value":"test_check_pytest"},{"name":"host","value":"DESKTOP-DJGNVLC"},{"name":"thread","value":"17852-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_check_pytest"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"browser","value":"'firefox'"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["smoke_market"]},"source":"3cfd576106cdaf5d.json","parameterValues":["'firefox'"]}